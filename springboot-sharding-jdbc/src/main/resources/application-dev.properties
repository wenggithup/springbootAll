# 动态数据源
spring.datasource.dynamic.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.dynamic.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:13306/test_demo?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.datasource.dynamic.datasource.master.username=root
spring.datasource.dynamic.datasource.master.password=123456
spring.datasource.dynamic.primary=master

spring.shardingsphere.datasource.names=ds-0,ds-1
# 设置默认数据源，并不是所有的表都需要分片，默认数据源没有路由规则，则会直接访问数据库
# 配置数据源 ds-0
# 配置数据源 ds-0
spring.shardingsphere.datasource.common.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.common.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-0.url=jdbc:mysql://127.0.0.1:13306/shard01?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.ds-0.username=root
spring.shardingsphere.datasource.ds-0.password=123456

# 配置数据源 ds-1

spring.shardingsphere.datasource.ds-1.url=jdbc:mysql://127.0.0.1:13306/shard02?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.ds-1.username=root
spring.shardingsphere.datasource.ds-1.password=123456


# 真实表
# spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..1}
spring.shardingsphere.rules.sharding.tables.t_order_2021.actual-data-nodes=ds-$->{0..1}.t_order_2021_$->{['01','02','03','04','05','06','07','08','09','10','11','12']}
# 配置数据库的分库策略，其中database-inline会在后面声明
# 分库分片键 user_id
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=id
# 分库分片算法
# 使用自定义类实现标准精确分库
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database-inline
# spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database-inline
# 配置t_order表的分表策略，其中t-order-inline会在后面声明
# 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}
# 分表分片键 order_id
# 使用标准分片算法 时间范围分片,分片键为时间类型
spring.shardingsphere.rules.sharding.tables.t_order_2021.table-strategy.standard.sharding-column=order_time
# spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
spring.shardingsphere.rules.sharding.tables.t_order_2021.table-strategy.standard.sharding-algorithm-name=t-order-inline
# 配置order_id采用雪花算法生成全局id策略
spring.shardingsphere.rules.sharding.tables.t_order_2021.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_order_2021.key-generate-strategy.key-generator-name=snowflake
# 配置具体的分库分表规则
# 分库分片算法类型，行表达式
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
# 分库分片算法，user_id%2
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds-$->{id % 2}

# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一

# 用于单分片键的标准分片场景
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称

# 用于多分片键的复合分片场景
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # 分片算法名称

# 用于Hint 的分片策略
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # 分片算法名称




# 分表算法 行表达式
#spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INLINE
# 分表分片算法
#spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.algorithm-expression=t_order_$->{order_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-item-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-item-inline.props.algorithm-expression=t_order_item_$->{order_id % 2}

# 分表标准分片算法类型，时间范围分片
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INTERVAL

# 分库标准分片算法，时间范围
# 分片键的时间戳格式
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.datetime-pattern=yyyy-MM-dd HH:mm:ss
# 时间分片下界值
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.datetime-lower=2021-01-01 00:00:00
# 时间分片上界值，默认值为当前系统时间
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.datetime-upper=2022-01-01 00:00:00
# 分片数据源或真实表的后缀格式，必须遵循 Java DateTimeFormatter 的格式，必须和 datetime-interval-unit 保持一致
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.sharding-suffix-pattern=yyyy_MM
# 分片键时间间隔，超过该时间间隔将进入下一分片
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.datetime-interval-amount=1
# 分片键时间间隔单位，必须遵循 Java ChronoUnit 的枚举值。例如：MONTHS
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.datetime-interval-unit=MONTHS


# 配置雪花算法
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123


# 配置广播表,默写表不需要分片，只需要在某个数据源中建一张即可，设置广播表，可以在连表的时候查询指定库中的指定表,此处设置在shard01 中
spring.shardingsphere.sharding.broadcast-tables=t_config
spring.shardingsphere.sharding.tables.t_config.actual-data-nodes=ds$->{0}.t_config

# 配置绑定表	有些表的数据是存在逻辑的主外键关系的
# 绑定表规则，多组绑定规则使用数组形式配置
# spring.shardingsphere.rules.sharding.binding-tables=t_order,t_order_item

#spring.shardingsphere.rules.sharding.binding-tables[0]=
# # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[1]=
## 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表


spring.shardingsphere.props.sql.show=true
